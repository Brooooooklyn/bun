import "reflect-metadata";

describe("decorator metadata", () => {
  test("type serialization", () => {
    function d1() {}
    class Known {}
    class Swag {}
    class A_1 {}

    @d1
    class A {
      constructor(
        p0: any,
        p1: unknown,
        p2: never,
        p3: void,
        p4: null,
        p5: undefined,
        p6: number,
        p7: string,
        p8: boolean,
        p9: symbol,
        p10: bigint,
        p11: object,
        p12: () => {},
        p13: [],
        p14: {},
        p15: 123,
        p16: 123n,
        p17: "123",
        p18: `123`,
        p19: true,
        p20: false,
        p21: Map,
        p22: Set,
        p23: Known,
        p24: Unknown,
        p25: never & string,
        p26: string & never,
        p27: null & string,
        p28: string & null,
        p29: undefined & string,
        p30: string & undefined,
        p31: void & string,
        p32: string & void,
        p33: unknown & string,
        p34: string & unknown,
        p35: any & string,
        p36: string & any,
        p37: never | string,
        p38: string | never,
        p39: null | string,
        p40: string | null,
        p41: undefined | string,
        p42: string | undefined,
        p43: void | string,
        p44: string | void,
        p45: unknown | string,
        p46: string | unknown,
        p47: any | string,
        p48: string | any,
        p49: string | string,
        p50: string & string,
        p51: Known | Swag,
        p52: Swag | Known,
        p53: Known & Swag,
        p54: Swag & Known,
        p55: never | Swag,
        p56: Swag | never,
        p57: null | Swag,
        p58: Swag | null,
        p59: undefined | Swag,
        p60: Swag | undefined,
        p61: void | Swag,
        p62: Swag | void,
        p63: unknown | Swag,
        p64: Swag | unknown,
        p65: any | Swag,
        p66: Swag | any,
        p67: never & Swag,
        p68: Swag & never,
        p69: null & Swag,
        p70: Swag & null,
        p71: undefined & Swag,
        p72: Swag & undefined,
        p73: void & Swag,
        p74: Swag & void,
        p75: unknown & Swag,
        p76: Swag & unknown,
        p77: any & Swag,
        p78: Swag & any,
        p79: Swag | Swag,
        p80: Swag & Swag,
        p81: Unknown | Known,
        p82: Known | Unknown,
        p83: Unknown & Known,
        p84: Known & Unknown,
        p85: Unknown | Unknown,
        p86: Unknown & Unknown,
        p87: never | never,
        p88: never & never,
        p89: null | null,
        p90: null & null,
        p91: undefined | undefined,
        p92: undefined & undefined,
        p93: void | void,
        p94: void & void,
        p95: unknown | unknown,
        p96: unknown & unknown,
        p97: any | any,
        p98: any & any,
        p99: never | void,
        p100: void | never,
        p101: null | void,
        p102: void | null,
        p103: undefined | void,
        p104: void | undefined,
        p105: void | void,
        p106: void & void,
        p107: unknown | void,
        p108: void | unknown,
        p109: any | void,
        p110: void | any,
        p111: never | unknown,
        p112: unknown | never,
        p113: null | unknown,
        p114: unknown | null,
        p115: undefined | unknown,
        p116: unknown | undefined,
        p117: void | unknown,
        p118: unknown | void,
        p119: unknown | unknown,
        p120: unknown & unknown,
        p121: any | unknown,
        p122: unknown | any,
        p123: never | any,
        p124: any | never,
        p125: null | any,
        p126: any | null,
        p127: undefined | any,
        p128: any | undefined,
        p129: void | any,
        p130: any | void,
        p131: unknown | any,
        p132: any | unknown,
        p133: any | any,
        p134: never & void,
        p135: void & never,
        p136: null & void,
        p137: void & null,
        p138: undefined & void,
        p139: void & undefined,
        p140: void & void,
        p141: void | void,
        p142: unknown & void,
        p143: void & unknown,
        p144: any & void,
        p145: void & any,
        p146: never & unknown,
        p147: unknown & never,
        p148: null & unknown,
        p149: unknown & null,
        p150: undefined & unknown,
        p151: unknown & undefined,
        p152: void & unknown,
        p153: unknown & void,
        p154: unknown & unknown,
        p155: unknown | unknown,
        p156: any & unknown,
        p157: unknown & any,
        p158: never & any,
        p159: any & never,
        p160: null & any,
        p161: any & null,
        p162: undefined & any,
        p163: any & undefined,
        p164: void & any,
        p165: any & void,
        p166: unknown & any,
        p167: any & unknown,
        p168: any & any,
        p169: string & number & boolean & never & symbol,
        p170: "foo" | A_1,
        p171: true | boolean,
        p172: "foo" | boolean,
        p173: A_1 | "foo",
      ) {}
    }

    // expect(Reflect.getMetadata("design:type", A)).toBe(Function);

    const received = Reflect.getMetadata("design:paramtypes", A);
    const expected = [
      Object,
      Object,
      void 0,
      void 0,
      void 0,
      void 0,
      Number,
      String,
      Boolean,
      typeof Symbol === "function" ? Symbol : Object,
      typeof BigInt === "function" ? BigInt : Object,
      Object,
      Function,
      Array,
      Object,
      Number,
      typeof BigInt === "function" ? BigInt : Object,
      String,
      String,
      Boolean,
      Boolean,
      Map,
      Set,
      Known,
      Object,
      void 0,
      void 0,
      String,
      String,
      String,
      String,
      Object,
      Object,
      String,
      String,
      Object,
      Object,
      String,
      String,
      String,
      String,
      String,
      String,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      String,
      String,
      Object,
      Object,
      Object,
      Object,
      Swag,
      Swag,
      Swag,
      Swag,
      Swag,
      Swag,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      void 0,
      void 0,
      Swag,
      Swag,
      Swag,
      Swag,
      Object,
      Object,
      Swag,
      Swag,
      Object,
      Object,
      Swag,
      Swag,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      Object,
      void 0,
      Object,
      Object,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      void 0,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      Object,
      Object,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      Object,
      Object,
      Object,
      void 0,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Object,
      Boolean,
      Object,
      Object,
    ];

    expect(received.length).toBe(expected.length);
    for (let i = 0; i < expected.length; i++) {
      expect(received[i]).toEqual(expected[i]);
    }

    expect(Object).toEqual(String);
  });
  test("design: type, paramtypes, returntype", () => {
    function d1() {}

    @d1
    class A {
      constructor(@d1 arg1: string) {}

      @d1
      method1(@d1 arg1: number): boolean {
        return true;
      }

      @d1
      prop1: () => {};

      @d1
      prop2: "foo" = "foo";

      @d1
      prop3: symbol;
    }

    expect(Reflect.getMetadata("design:type", A)).toBeUndefined();
    expect(Reflect.getMetadata("design:paramtypes", A)[0]).toBe(String);
    expect(Reflect.getMetadata("design:returntype", A)).toBeUndefined();

    expect(Reflect.getMetadata("design:type", A.prototype)).toBeUndefined();
    expect(Reflect.getMetadata("design:paramtypes", A.prototype)).toBeUndefined();
    expect(Reflect.getMetadata("design:returntype", A.prototype)).toBeUndefined();

    expect(Reflect.getMetadata("design:type", A.prototype.method1)).toBeUndefined();
    expect(Reflect.getMetadata("design:paramtypes", A.prototype.method1)).toBeUndefined();
    expect(Reflect.getMetadata("design:returntype", A.prototype.method1)).toBeUndefined();

    expect(Reflect.getMetadata("design:type", A.prototype, "method1")).toBe(Function);
    expect(Reflect.getMetadata("design:paramtypes", A.prototype, "method1")[0]).toBe(Number);
    expect(Reflect.getMetadata("design:returntype", A.prototype, "method1")).toBe(Boolean);

    expect(Reflect.getMetadata("design:type", A.prototype, "prop1")).toBe(Function);
    expect(Reflect.getMetadata("design:paramtypes", A.prototype, "prop1")).toBeUndefined();
    expect(Reflect.getMetadata("design:returntype", A.prototype, "prop1")).toBeUndefined();

    expect(Reflect.getMetadata("design:type", A.prototype, "prop2")).toBe(String);
    expect(Reflect.getMetadata("design:paramtypes", A.prototype, "prop2")).toBeUndefined();
    expect(Reflect.getMetadata("design:returntype", A.prototype, "prop2")).toBeUndefined();

    expect(Reflect.getMetadata("design:type", A.prototype, "prop3")).toBe(Symbol);
    expect(Reflect.getMetadata("design:paramtypes", A.prototype, "prop3")).toBeUndefined();
    expect(Reflect.getMetadata("design:returntype", A.prototype, "prop3")).toBeUndefined();
  });
});
